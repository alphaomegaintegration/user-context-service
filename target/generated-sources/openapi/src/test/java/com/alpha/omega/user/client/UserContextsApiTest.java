/*
 * user-context-service
 * Data Platform User Context Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alpha.omega.user.client;

import com.alpha.omega.user.model.UserContext;
import com.alpha.omega.user.model.UserContextBatchRequest;
import com.alpha.omega.user.model.UserContextPage;
import com.alpha.omega.user.model.UserContextPermissions;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for UserContextsApi
 */
@Ignore
public class UserContextsApiTest {

    private final UserContextsApi api = new UserContextsApi();

    
    /**
     * gets userContext by userId and contextId
     *
     * 
     */
    @Test
    public void addPermissionToUserContextTest()  {
        String userId = null;
        String contextId = null;
        String permission = null;
        String cacheControl = null;
        UserContext response = api.addPermissionToUserContext(userId, contextId, permission, cacheControl).block();

        // TODO: test validations
    }
    
    /**
     * gets userContext by userId and contextId
     *
     * 
     */
    @Test
    public void addPermissionsToUserContextTest()  {
        String userId = null;
        String contextId = null;
        String cacheControl = null;
        String additionalPermissions = null;
        UserContext response = api.addPermissionsToUserContext(userId, contextId, cacheControl, additionalPermissions).block();

        // TODO: test validations
    }
    
    /**
     * gets userContext by userId and contextId
     *
     * User must have CREATE_USER_CONTEXTS permission
     */
    @Test
    public void addRoleToUserContextTest()  {
        String userId = null;
        String contextId = null;
        String roleId = null;
        String cacheControl = null;
        String additionalPermissions = null;
        UserContext response = api.addRoleToUserContext(userId, contextId, roleId, cacheControl, additionalPermissions).block();

        // TODO: test validations
    }
    
    /**
     * creates userContext
     *
     * User must have CREATE_USER_CONTEXTS permission
     */
    @Test
    public void createUserContextTest()  {
        UserContext userContext = null;
        UserContext response = api.createUserContext(userContext).block();

        // TODO: test validations
    }
    
    /**
     * creates userContext
     *
     * User must have CREATE_USER_CONTEXTS permission
     */
    @Test
    public void createUserContextBatchTest()  {
        UserContextBatchRequest userContextBatchRequest = null;
        UserContextPage response = api.createUserContextBatch(userContextBatchRequest).block();

        // TODO: test validations
    }
    
    /**
     * deletes userContext by usercontextId
     *
     * User must have DELETE_USER_CONTEXTS permission
     */
    @Test
    public void deleteUserContextByUserContextIdTest()  {
        String usercontextId = null;
        api.deleteUserContextByUserContextId(usercontextId).block();

        // TODO: test validations
    }
    
    /**
     * gets all userContexts
     *
     * User must have LIST_USER_CONTEXTS permission
     */
    @Test
    public void getAllUserContextsTest()  {
        Integer page = null;
        Integer pageSize = null;
        String direction = null;
        String cacheControl = null;
        UserContextPage response = api.getAllUserContexts(page, pageSize, direction, cacheControl).block();

        // TODO: test validations
    }
    
    /**
     * gets userContext by userId and contextId
     *
     * user must have LIST_USER_CONTEXTS permission
     */
    @Test
    public void getUserContextByContextIdTest()  {
        String contextId = null;
        String cacheControl = null;
        Integer page = null;
        Integer pageSize = null;
        String direction = null;
        UserContextPage response = api.getUserContextByContextId(contextId, cacheControl, page, pageSize, direction).block();

        // TODO: test validations
    }
    
    /**
     * gets userContext by usercontextId
     *
     * User must have LIST_USER_CONTEXTS permission
     */
    @Test
    public void getUserContextByUserContextIdTest()  {
        String usercontextId = null;
        UserContext response = api.getUserContextByUserContextId(usercontextId).block();

        // TODO: test validations
    }
    
    /**
     * gets userContext by userId and contextId
     *
     * User must have LIST_USER_CONTEXTS permission
     */
    @Test
    public void getUserContextByUserIdTest()  {
        String userId = null;
        String cacheControl = null;
        Integer page = null;
        Integer pageSize = null;
        String direction = null;
        UserContextPage response = api.getUserContextByUserId(userId, cacheControl, page, pageSize, direction).block();

        // TODO: test validations
    }
    
    /**
     * gets userContext by userId and contextId
     *
     * User must have LIST_USER_CONTEXTS permission
     */
    @Test
    public void getUserContextByUserIdAndContextIdTest()  {
        String userId = null;
        String contextId = null;
        Boolean allRoles = null;
        String roles = null;
        String cacheControl = null;
        UserContextPermissions response = api.getUserContextByUserIdAndContextId(userId, contextId, allRoles, roles, cacheControl).block();

        // TODO: test validations
    }
    
    /**
     * updates userContext via upsert
     *
     * User must have UPDATE_USER_CONTEXTS permission
     */
    @Test
    public void updateUserContextTest()  {
        String usercontextId = null;
        UserContext userContext = null;
        UserContext response = api.updateUserContext(usercontextId, userContext).block();

        // TODO: test validations
    }
    
}
