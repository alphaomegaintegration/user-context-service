openapi: 3.0.3
info:
  description: Data Platform User Context Service
  title: user-context-service
  version: v1
servers:
- url: /
tags:
- name: Contexts
- name: UserContexts
- name: Users
paths:
  /contexts:
    get:
      description: User must have LIST_CONTEXTS permission
      operationId: getAllContexts
      parameters:
      - description: What page to grab
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Number of elements on page
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Sort order direction
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContextPage'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: gets all contexts
      tags:
      - Contexts
      x-accepts: application/json
      x-tags:
      - tag: Contexts
    post:
      description: User must have CREATE_CONTEXTS permission
      operationId: createContext
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Context'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: creates new context via upsert
      tags:
      - Contexts
      x-accepts: application/json
      x-content-type: application/json
      x-tags:
      - tag: Contexts
  /contexts/{contextId}:
    delete:
      description: User must have DELETE_CONTEXTS permission
      operationId: deleteContextByContextId
      parameters:
      - description: contextId
        explode: false
        in: path
        name: contextId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: deletes context by contextId
      tags:
      - Contexts
      x-accepts: application/json
      x-tags:
      - tag: Contexts
    get:
      description: User must have LIST_CONTEXTS permission
      operationId: getContextByContextId
      parameters:
      - description: contextId
        explode: false
        in: path
        name: contextId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: gets context by contextId
      tags:
      - Contexts
      x-accepts: application/json
      x-tags:
      - tag: Contexts
    put:
      description: User must have UPDATE_CONTEXTS permission
      operationId: updateContextByContextId
      parameters:
      - description: contextId
        explode: false
        in: path
        name: contextId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Context'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: updates context by contextId
      tags:
      - Contexts
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: Contexts
  /contexts/{contextId}/roles:
    get:
      description: User must have LIST_CONTEXTS permission
      operationId: getRolesByContextId
      parameters:
      - description: contextId
        explode: false
        in: path
        name: contextId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolePage'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: get roles by contextId
      tags:
      - Contexts
      x-accepts: application/json
      x-tags:
      - tag: Contexts
    post:
      description: User must have UPDATE_CONTEXTS permission
      operationId: addAdditionalRolesByContextId
      parameters:
      - description: contextId
        explode: false
        in: path
        name: contextId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: get roles by contextId
      tags:
      - Contexts
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: Contexts
  /contexts/{contextId}/roles/{roleId}:
    get:
      description: User must have LIST_CONTEXTS permission
      operationId: getRoleByContextIdAndRoleId
      parameters:
      - description: contextId
        explode: false
        in: path
        name: contextId
        required: true
        schema:
          type: string
        style: simple
      - description: roleId
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: get context by contextId and roleId
      tags:
      - Contexts
      x-accepts: application/json
      x-tags:
      - tag: Contexts
  /usercontexts:
    get:
      description: User must have LIST_USER_CONTEXTS permission
      operationId: getAllUserContexts
      parameters:
      - description: What page to grab
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Number of elements on page
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Sort order direction
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: Http cache control header
        explode: false
        in: header
        name: Cache-Control
        required: false
        schema:
          enum:
          - no-cache
          - must-revalidate
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContextPage'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: gets all userContexts
      tags:
      - UserContexts
      x-accepts: application/json
      x-tags:
      - tag: UserContexts
    post:
      description: User must have CREATE_USER_CONTEXTS permission
      operationId: createUserContext
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserContext'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContext'
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: creates userContext
      tags:
      - UserContexts
      x-accepts: application/json
      x-content-type: application/json
      x-tags:
      - tag: UserContexts
  /usercontexts/batch:
    post:
      description: User must have CREATE_USER_CONTEXTS permission
      operationId: createUserContextBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserContextBatchRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContextPage'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: creates userContext
      tags:
      - UserContexts
      x-accepts: application/json
      x-content-type: application/json
      x-tags:
      - tag: UserContexts
  /usercontexts/{usercontextId}:
    delete:
      description: User must have DELETE_USER_CONTEXTS permission
      operationId: deleteUserContextByUserContextId
      parameters:
      - description: usercontextId
        explode: false
        in: path
        name: usercontextId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: deletes userContext by usercontextId
      tags:
      - UserContexts
      x-accepts: application/json
      x-tags:
      - tag: UserContexts
    get:
      description: User must have LIST_USER_CONTEXTS permission
      operationId: getUserContextByUserContextId
      parameters:
      - description: usercontextId
        explode: false
        in: path
        name: usercontextId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContext'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: gets userContext by usercontextId
      tags:
      - UserContexts
      x-accepts: application/json
      x-tags:
      - tag: UserContexts
    put:
      description: User must have UPDATE_USER_CONTEXTS permission
      operationId: updateUserContext
      parameters:
      - description: usercontextId
        explode: false
        in: path
        name: usercontextId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserContext'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContext'
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: updates userContext via upsert
      tags:
      - UserContexts
      x-accepts: application/json
      x-content-type: application/json
      x-tags:
      - tag: UserContexts
  /usercontexts/user/{userId}/context/{contextId}/role/{roleId}:
    post:
      description: User must have CREATE_USER_CONTEXTS permission
      operationId: addRoleToUserContext
      parameters:
      - description: userId
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: contextId
        explode: false
        in: path
        name: contextId
        required: true
        schema:
          type: string
        style: simple
      - description: roleId
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: Cache-Control
        required: false
        schema:
          default: no-cache
          type: string
        style: simple
      - description: additionalPermissions comma delimited
        explode: true
        in: query
        name: additionalPermissions
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContext'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: gets userContext by userId and contextId
      tags:
      - UserContexts
      x-accepts: application/json
      x-tags:
      - tag: UserContexts
  /usercontexts/user/{userId}/context/{contextId}/permissions:
    post:
      operationId: addPermissionsToUserContext
      parameters:
      - description: userId
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: contextId
        explode: false
        in: path
        name: contextId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: Cache-Control
        required: false
        schema:
          default: no-cache
          type: string
        style: simple
      - description: additionalPermissions comma delimited
        explode: true
        in: query
        name: additionalPermissions
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContext'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
      summary: gets userContext by userId and contextId
      tags:
      - UserContexts
      x-accepts: application/json
      x-tags:
      - tag: UserContexts
  /usercontexts/user/{userId}/context/{contextId}/permissions/{permission}:
    post:
      operationId: addPermissionToUserContext
      parameters:
      - description: userId
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: contextId
        explode: false
        in: path
        name: contextId
        required: true
        schema:
          type: string
        style: simple
      - description: permission
        explode: false
        in: path
        name: permission
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: Cache-Control
        required: false
        schema:
          default: no-cache
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContext'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
      summary: gets userContext by userId and contextId
      tags:
      - UserContexts
      x-accepts: application/json
      x-tags:
      - tag: UserContexts
  /usercontexts/user/{userId}/context/{contextId}:
    get:
      description: User must have LIST_USER_CONTEXTS permission
      operationId: getUserContextByUserIdAndContextId
      parameters:
      - description: userId
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: contextId
        explode: false
        in: path
        name: contextId
        required: true
        schema:
          type: string
        style: simple
      - description: Determines if all roles permissions are returned
        explode: true
        in: query
        name: allRoles
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: comma separated list of roles
        explode: true
        in: query
        name: roles
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: Cache-Control
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContextPermissions'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: gets userContext by userId and contextId
      tags:
      - UserContexts
      x-accepts: application/json
      x-tags:
      - tag: UserContexts
  /usercontexts/user/{userId}:
    get:
      description: User must have LIST_USER_CONTEXTS permission
      operationId: getUserContextByUserId
      parameters:
      - description: userId
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: Cache-Control
        required: false
        schema:
          default: no-cache
          type: string
        style: simple
      - description: What page to grab
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Number of elements on page
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Sort order direction
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContextPage'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: gets userContext by userId and contextId
      tags:
      - UserContexts
      x-accepts: application/json
      x-tags:
      - tag: UserContexts
  /usercontexts/context/{contextId}:
    get:
      description: user must have LIST_USER_CONTEXTS permission
      operationId: getUserContextByContextId
      parameters:
      - description: contextId
        explode: false
        in: path
        name: contextId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: Cache-Control
        required: false
        schema:
          default: no-cache
          type: string
        style: simple
      - description: What page to grab
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Number of elements on page
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      - description: Sort order direction
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContextPage'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: gets userContext by userId and contextId
      tags:
      - UserContexts
      x-accepts: application/json
      x-tags:
      - tag: UserContexts
  /users/batch:
    post:
      operationId: createUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoad'
          description: OK
          headers:
            Cache-Control:
              description: Cache-Control header provides important info on how long
                a response may be considered fresh
              example: "Cache-Control: max-age=3600, public, must-revalidate"
              explode: false
              schema:
                type: string
              style: simple
      summary: gets userContext by userId and contextId
      tags:
      - Users
      x-accepts: application/json
      x-tags:
      - tag: Users
components:
  schemas:
    UserLoad:
      type: UserLoad
    ContextPage:
      example:
        elapsed: elapsed
        total: 1
        pageSize: 6
        correlationId: correlationId
        page: 0
        content:
        - contextName: contextName
          modifiedTime: modifiedTime
          createdBy: createdBy
          permissions:
          - permissions
          - permissions
          roles:
          - roleId: roleId
            permissions:
            - permissions
            - permissions
            roleName: roleName
          - roleId: roleId
            permissions:
            - permissions
            - permissions
            roleName: roleName
          description: description
          createdTime: createdTime
          contextId: contextId
          modifiedBy: modifiedBy
          id: id
          enabled: true
          transactionId: transactionId
        - contextName: contextName
          modifiedTime: modifiedTime
          createdBy: createdBy
          permissions:
          - permissions
          - permissions
          roles:
          - roleId: roleId
            permissions:
            - permissions
            - permissions
            roleName: roleName
          - roleId: roleId
            permissions:
            - permissions
            - permissions
            roleName: roleName
          description: description
          createdTime: createdTime
          contextId: contextId
          modifiedBy: modifiedBy
          id: id
          enabled: true
          transactionId: transactionId
      properties:
        content:
          items:
            $ref: '#/components/schemas/Context'
          type: array
        elapsed:
          type: string
        correlationId:
          type: string
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
      type: object
    Context:
      example:
        contextName: contextName
        modifiedTime: modifiedTime
        createdBy: createdBy
        permissions:
        - permissions
        - permissions
        roles:
        - roleId: roleId
          permissions:
          - permissions
          - permissions
          roleName: roleName
        - roleId: roleId
          permissions:
          - permissions
          - permissions
          roleName: roleName
        description: description
        createdTime: createdTime
        contextId: contextId
        modifiedBy: modifiedBy
        id: id
        enabled: true
        transactionId: transactionId
      properties:
        id:
          type: string
        contextId:
          type: string
        contextName:
          type: string
        description:
          type: string
        permissions:
          items:
            type: string
          minItems: 1
          type: array
          uniqueItems: true
        roles:
          items:
            $ref: '#/components/schemas/Role'
          minItems: 1
          type: array
        enabled:
          type: boolean
        transactionId:
          type: string
        createdBy:
          type: string
        modifiedBy:
          type: string
        createdTime:
          type: string
        modifiedTime:
          type: string
      required:
      - contextId
      - contextName
      - description
      - permissions
      - roles
      type: object
    RolePage:
      example:
        elapsed: elapsed
        total: 1
        pageSize: 6
        correlationId: correlationId
        page: 0
        content:
        - roleId: roleId
          permissions:
          - permissions
          - permissions
          roleName: roleName
        - roleId: roleId
          permissions:
          - permissions
          - permissions
          roleName: roleName
      properties:
        content:
          items:
            $ref: '#/components/schemas/Role'
          type: array
        elapsed:
          type: string
        correlationId:
          type: string
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
      type: object
    Role:
      example:
        roleId: roleId
        permissions:
        - permissions
        - permissions
        roleName: roleName
      properties:
        roleId:
          type: string
        roleName:
          type: string
        permissions:
          items:
            type: string
          minItems: 1
          type: array
          uniqueItems: true
      required:
      - permissions
      - roleId
      - roleName
      type: object
    UserContextPage:
      example:
        elapsed: elapsed
        total: 1
        pageSize: 6
        correlationId: correlationId
        page: 0
        content:
        - modifiedTime: modifiedTime
          createdBy: createdBy
          roleId: roleId
          additionalRoles:
          - additionalRoles
          - additionalRoles
          createdTime: createdTime
          contextId: contextId
          modifiedBy: modifiedBy
          id: id
          userId: userId
          additionalPermissions:
          - additionalPermissions
          - additionalPermissions
          enabled: true
          transactionId: transactionId
        - modifiedTime: modifiedTime
          createdBy: createdBy
          roleId: roleId
          additionalRoles:
          - additionalRoles
          - additionalRoles
          createdTime: createdTime
          contextId: contextId
          modifiedBy: modifiedBy
          id: id
          userId: userId
          additionalPermissions:
          - additionalPermissions
          - additionalPermissions
          enabled: true
          transactionId: transactionId
      properties:
        content:
          items:
            $ref: '#/components/schemas/UserContext'
          type: array
        elapsed:
          type: string
        correlationId:
          type: string
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
      type: object
    UserContext:
      example:
        modifiedTime: modifiedTime
        createdBy: createdBy
        roleId: roleId
        additionalRoles:
        - additionalRoles
        - additionalRoles
        createdTime: createdTime
        contextId: contextId
        modifiedBy: modifiedBy
        id: id
        userId: userId
        additionalPermissions:
        - additionalPermissions
        - additionalPermissions
        enabled: true
        transactionId: transactionId
      properties:
        id:
          type: string
        userId:
          type: string
        contextId:
          type: string
        roleId:
          type: string
        additionalPermissions:
          items:
            type: string
          type: array
          uniqueItems: true
        additionalRoles:
          items:
            type: string
          type: array
          uniqueItems: true
        enabled:
          type: boolean
        transactionId:
          type: string
        createdBy:
          type: string
        modifiedBy:
          type: string
        createdTime:
          type: string
        modifiedTime:
          type: string
      required:
      - additionalPermissions
      - additionalRoles
      - contextId
      - roleId
      - userId
      type: object
    UserContextBatchRequest:
      example:
        correlationId: correlationId
        users:
        - modifiedTime: modifiedTime
          createdBy: createdBy
          roleId: roleId
          additionalRoles:
          - additionalRoles
          - additionalRoles
          createdTime: createdTime
          contextId: contextId
          modifiedBy: modifiedBy
          id: id
          userId: userId
          additionalPermissions:
          - additionalPermissions
          - additionalPermissions
          enabled: true
          transactionId: transactionId
        - modifiedTime: modifiedTime
          createdBy: createdBy
          roleId: roleId
          additionalRoles:
          - additionalRoles
          - additionalRoles
          createdTime: createdTime
          contextId: contextId
          modifiedBy: modifiedBy
          id: id
          userId: userId
          additionalPermissions:
          - additionalPermissions
          - additionalPermissions
          enabled: true
          transactionId: transactionId
      properties:
        users:
          items:
            $ref: '#/components/schemas/UserContext'
          type: array
        correlationId:
          type: string
      type: object
    UserContextPermissions:
      example:
        roleId: roleId
        permissions:
        - permissions
        - permissions
        contextId: contextId
        userId: userId
        enabled: true
      properties:
        userId:
          type: string
        contextId:
          type: string
        roleId:
          type: string
        permissions:
          items:
            type: string
          type: array
        enabled:
          type: boolean
      required:
      - contextId
      - permissions
      - userId
      type: object
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
    Bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http
