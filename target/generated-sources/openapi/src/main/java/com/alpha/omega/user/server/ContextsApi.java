/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.alpha.omega.user.server;

import com.alpha.omega.user.model.Context;
import com.alpha.omega.user.model.ContextPage;
import com.alpha.omega.user.model.Role;
import com.alpha.omega.user.model.RolePage;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-20T06:26:02.527872-05:00[America/New_York]")
@Validated
@Tag(name = "contexts", description = "the contexts API")
public interface ContextsApi {

    default ContextsApiDelegate getDelegate() {
        return new ContextsApiDelegate() {};
    }

    /**
     * POST /contexts/{contextId}/roles : get roles by contextId
     * User must have UPDATE_CONTEXTS permission
     *
     * @param contextId contextId (required)
     * @param role  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "addAdditionalRolesByContextId",
        summary = "get roles by contextId",
        tags = { "Contexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Context.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/contexts/{contextId}/roles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Context>> addAdditionalRolesByContextId(
        @Parameter(name = "contextId", description = "contextId", required = true) @PathVariable("contextId") String contextId,
        @Parameter(name = "Role", description = "", required = true) @Valid @RequestBody Mono<Role> role,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().addAdditionalRolesByContextId(contextId, role, exchange);
    }


    /**
     * POST /contexts : creates new context via upsert
     * User must have CREATE_CONTEXTS permission
     *
     * @param context  (required)
     * @return OK (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "createContext",
        summary = "creates new context via upsert",
        tags = { "Contexts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Context.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/contexts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Context>> createContext(
        @Parameter(name = "Context", description = "", required = true) @Valid @RequestBody Mono<Context> context,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().createContext(context, exchange);
    }


    /**
     * DELETE /contexts/{contextId} : deletes context by contextId
     * User must have DELETE_CONTEXTS permission
     *
     * @param contextId contextId (required)
     * @return deleted successfully (status code 204)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "deleteContextByContextId",
        summary = "deletes context by contextId",
        tags = { "Contexts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/contexts/{contextId}"
    )
    default Mono<ResponseEntity<Void>> deleteContextByContextId(
        @Parameter(name = "contextId", description = "contextId", required = true) @PathVariable("contextId") String contextId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().deleteContextByContextId(contextId, exchange);
    }


    /**
     * GET /contexts : gets all contexts
     * User must have LIST_CONTEXTS permission
     *
     * @param page What page to grab (optional, default to 1)
     * @param pageSize Number of elements on page (optional, default to 25)
     * @param direction Sort order direction (optional, default to ASC)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getAllContexts",
        summary = "gets all contexts",
        tags = { "Contexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContextPage.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/contexts",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<ContextPage>> getAllContexts(
        @Parameter(name = "page", description = "What page to grab") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Parameter(name = "pageSize", description = "Number of elements on page") @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "direction", description = "Sort order direction") @Valid @RequestParam(value = "direction", required = false, defaultValue = "ASC") String direction,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getAllContexts(page, pageSize, direction, exchange);
    }


    /**
     * GET /contexts/{contextId} : gets context by contextId
     * User must have LIST_CONTEXTS permission
     *
     * @param contextId contextId (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getContextByContextId",
        summary = "gets context by contextId",
        tags = { "Contexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Context.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/contexts/{contextId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Context>> getContextByContextId(
        @Parameter(name = "contextId", description = "contextId", required = true) @PathVariable("contextId") String contextId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getContextByContextId(contextId, exchange);
    }


    /**
     * GET /contexts/{contextId}/roles/{roleId} : get context by contextId and roleId
     * User must have LIST_CONTEXTS permission
     *
     * @param contextId contextId (required)
     * @param roleId roleId (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getRoleByContextIdAndRoleId",
        summary = "get context by contextId and roleId",
        tags = { "Contexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/contexts/{contextId}/roles/{roleId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Role>> getRoleByContextIdAndRoleId(
        @Parameter(name = "contextId", description = "contextId", required = true) @PathVariable("contextId") String contextId,
        @Parameter(name = "roleId", description = "roleId", required = true) @PathVariable("roleId") String roleId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getRoleByContextIdAndRoleId(contextId, roleId, exchange);
    }


    /**
     * GET /contexts/{contextId}/roles : get roles by contextId
     * User must have LIST_CONTEXTS permission
     *
     * @param contextId contextId (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getRolesByContextId",
        summary = "get roles by contextId",
        tags = { "Contexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RolePage.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/contexts/{contextId}/roles",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<RolePage>> getRolesByContextId(
        @Parameter(name = "contextId", description = "contextId", required = true) @PathVariable("contextId") String contextId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getRolesByContextId(contextId, exchange);
    }


    /**
     * PUT /contexts/{contextId} : updates context by contextId
     * User must have UPDATE_CONTEXTS permission
     *
     * @param contextId contextId (required)
     * @param context  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "updateContextByContextId",
        summary = "updates context by contextId",
        tags = { "Contexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Context.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/contexts/{contextId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Context>> updateContextByContextId(
        @Parameter(name = "contextId", description = "contextId", required = true) @PathVariable("contextId") String contextId,
        @Parameter(name = "Context", description = "", required = true) @Valid @RequestBody Mono<Context> context,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().updateContextByContextId(contextId, context, exchange);
    }

}
