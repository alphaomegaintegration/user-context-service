/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.alpha.omega.user.server;

import com.alpha.omega.user.model.UserContext;
import com.alpha.omega.user.model.UserContextBatchRequest;
import com.alpha.omega.user.model.UserContextPage;
import com.alpha.omega.user.model.UserContextPermissions;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-20T06:26:02.527872-05:00[America/New_York]")
@Validated
@Tag(name = "usercontexts", description = "the usercontexts API")
public interface UsercontextsApi {

    default UsercontextsApiDelegate getDelegate() {
        return new UsercontextsApiDelegate() {};
    }

    /**
     * POST /usercontexts/user/{userId}/context/{contextId}/permissions/{permission} : gets userContext by userId and contextId
     *
     * @param userId userId (required)
     * @param contextId contextId (required)
     * @param permission permission (required)
     * @param cacheControl  (optional, default to no-cache)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "addPermissionToUserContext",
        summary = "gets userContext by userId and contextId",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserContext.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/usercontexts/user/{userId}/context/{contextId}/permissions/{permission}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserContext>> addPermissionToUserContext(
        @Parameter(name = "userId", description = "userId", required = true) @PathVariable("userId") String userId,
        @Parameter(name = "contextId", description = "contextId", required = true) @PathVariable("contextId") String contextId,
        @Parameter(name = "permission", description = "permission", required = true) @PathVariable("permission") String permission,
        @Parameter(name = "Cache-Control", description = "") @RequestHeader(value = "Cache-Control", required = false, defaultValue = "no-cache") String cacheControl,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().addPermissionToUserContext(userId, contextId, permission, cacheControl, exchange);
    }


    /**
     * POST /usercontexts/user/{userId}/context/{contextId}/permissions : gets userContext by userId and contextId
     *
     * @param userId userId (required)
     * @param contextId contextId (required)
     * @param cacheControl  (optional, default to no-cache)
     * @param additionalPermissions additionalPermissions comma delimited (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "addPermissionsToUserContext",
        summary = "gets userContext by userId and contextId",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserContext.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/usercontexts/user/{userId}/context/{contextId}/permissions",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserContext>> addPermissionsToUserContext(
        @Parameter(name = "userId", description = "userId", required = true) @PathVariable("userId") String userId,
        @Parameter(name = "contextId", description = "contextId", required = true) @PathVariable("contextId") String contextId,
        @Parameter(name = "Cache-Control", description = "") @RequestHeader(value = "Cache-Control", required = false, defaultValue = "no-cache") String cacheControl,
        @Parameter(name = "additionalPermissions", description = "additionalPermissions comma delimited") @Valid @RequestParam(value = "additionalPermissions", required = false) String additionalPermissions,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().addPermissionsToUserContext(userId, contextId, cacheControl, additionalPermissions, exchange);
    }


    /**
     * POST /usercontexts/user/{userId}/context/{contextId}/role/{roleId} : gets userContext by userId and contextId
     * User must have CREATE_USER_CONTEXTS permission
     *
     * @param userId userId (required)
     * @param contextId contextId (required)
     * @param roleId roleId (required)
     * @param cacheControl  (optional, default to no-cache)
     * @param additionalPermissions additionalPermissions comma delimited (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "addRoleToUserContext",
        summary = "gets userContext by userId and contextId",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserContext.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/usercontexts/user/{userId}/context/{contextId}/role/{roleId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserContext>> addRoleToUserContext(
        @Parameter(name = "userId", description = "userId", required = true) @PathVariable("userId") String userId,
        @Parameter(name = "contextId", description = "contextId", required = true) @PathVariable("contextId") String contextId,
        @Parameter(name = "roleId", description = "roleId", required = true) @PathVariable("roleId") String roleId,
        @Parameter(name = "Cache-Control", description = "") @RequestHeader(value = "Cache-Control", required = false, defaultValue = "no-cache") String cacheControl,
        @Parameter(name = "additionalPermissions", description = "additionalPermissions comma delimited") @Valid @RequestParam(value = "additionalPermissions", required = false) String additionalPermissions,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().addRoleToUserContext(userId, contextId, roleId, cacheControl, additionalPermissions, exchange);
    }


    /**
     * POST /usercontexts : creates userContext
     * User must have CREATE_USER_CONTEXTS permission
     *
     * @param userContext  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "createUserContext",
        summary = "creates userContext",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserContext.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/usercontexts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<UserContext>> createUserContext(
        @Parameter(name = "UserContext", description = "", required = true) @Valid @RequestBody Mono<UserContext> userContext,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().createUserContext(userContext, exchange);
    }


    /**
     * POST /usercontexts/batch : creates userContext
     * User must have CREATE_USER_CONTEXTS permission
     *
     * @param userContextBatchRequest  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "createUserContextBatch",
        summary = "creates userContext",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserContextPage.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/usercontexts/batch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<UserContextPage>> createUserContextBatch(
        @Parameter(name = "UserContextBatchRequest", description = "", required = true) @Valid @RequestBody Mono<UserContextBatchRequest> userContextBatchRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().createUserContextBatch(userContextBatchRequest, exchange);
    }


    /**
     * DELETE /usercontexts/{usercontextId} : deletes userContext by usercontextId
     * User must have DELETE_USER_CONTEXTS permission
     *
     * @param usercontextId usercontextId (required)
     * @return deleted successfully (status code 204)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "deleteUserContextByUserContextId",
        summary = "deletes userContext by usercontextId",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/usercontexts/{usercontextId}"
    )
    default Mono<ResponseEntity<Void>> deleteUserContextByUserContextId(
        @Parameter(name = "usercontextId", description = "usercontextId", required = true) @PathVariable("usercontextId") String usercontextId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().deleteUserContextByUserContextId(usercontextId, exchange);
    }


    /**
     * GET /usercontexts : gets all userContexts
     * User must have LIST_USER_CONTEXTS permission
     *
     * @param page What page to grab (optional, default to 1)
     * @param pageSize Number of elements on page (optional, default to 25)
     * @param direction Sort order direction (optional, default to ASC)
     * @param cacheControl Http cache control header (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getAllUserContexts",
        summary = "gets all userContexts",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserContextPage.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usercontexts",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserContextPage>> getAllUserContexts(
        @Parameter(name = "page", description = "What page to grab") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Parameter(name = "pageSize", description = "Number of elements on page") @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "direction", description = "Sort order direction") @Valid @RequestParam(value = "direction", required = false, defaultValue = "ASC") String direction,
        @Parameter(name = "Cache-Control", description = "Http cache control header") @RequestHeader(value = "Cache-Control", required = false) String cacheControl,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getAllUserContexts(page, pageSize, direction, cacheControl, exchange);
    }


    /**
     * GET /usercontexts/context/{contextId} : gets userContext by userId and contextId
     * user must have LIST_USER_CONTEXTS permission
     *
     * @param contextId contextId (required)
     * @param cacheControl  (optional, default to no-cache)
     * @param page What page to grab (optional, default to 1)
     * @param pageSize Number of elements on page (optional, default to 25)
     * @param direction Sort order direction (optional, default to ASC)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getUserContextByContextId",
        summary = "gets userContext by userId and contextId",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserContextPage.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usercontexts/context/{contextId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserContextPage>> getUserContextByContextId(
        @Parameter(name = "contextId", description = "contextId", required = true) @PathVariable("contextId") String contextId,
        @Parameter(name = "Cache-Control", description = "") @RequestHeader(value = "Cache-Control", required = false, defaultValue = "no-cache") String cacheControl,
        @Parameter(name = "page", description = "What page to grab") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Parameter(name = "pageSize", description = "Number of elements on page") @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "direction", description = "Sort order direction") @Valid @RequestParam(value = "direction", required = false, defaultValue = "ASC") String direction,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getUserContextByContextId(contextId, cacheControl, page, pageSize, direction, exchange);
    }


    /**
     * GET /usercontexts/{usercontextId} : gets userContext by usercontextId
     * User must have LIST_USER_CONTEXTS permission
     *
     * @param usercontextId usercontextId (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getUserContextByUserContextId",
        summary = "gets userContext by usercontextId",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserContext.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usercontexts/{usercontextId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserContext>> getUserContextByUserContextId(
        @Parameter(name = "usercontextId", description = "usercontextId", required = true) @PathVariable("usercontextId") String usercontextId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getUserContextByUserContextId(usercontextId, exchange);
    }


    /**
     * GET /usercontexts/user/{userId} : gets userContext by userId and contextId
     * User must have LIST_USER_CONTEXTS permission
     *
     * @param userId userId (required)
     * @param cacheControl  (optional, default to no-cache)
     * @param page What page to grab (optional, default to 1)
     * @param pageSize Number of elements on page (optional, default to 25)
     * @param direction Sort order direction (optional, default to ASC)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getUserContextByUserId",
        summary = "gets userContext by userId and contextId",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserContextPage.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usercontexts/user/{userId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserContextPage>> getUserContextByUserId(
        @Parameter(name = "userId", description = "userId", required = true) @PathVariable("userId") String userId,
        @Parameter(name = "Cache-Control", description = "") @RequestHeader(value = "Cache-Control", required = false, defaultValue = "no-cache") String cacheControl,
        @Parameter(name = "page", description = "What page to grab") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Parameter(name = "pageSize", description = "Number of elements on page") @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "direction", description = "Sort order direction") @Valid @RequestParam(value = "direction", required = false, defaultValue = "ASC") String direction,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getUserContextByUserId(userId, cacheControl, page, pageSize, direction, exchange);
    }


    /**
     * GET /usercontexts/user/{userId}/context/{contextId} : gets userContext by userId and contextId
     * User must have LIST_USER_CONTEXTS permission
     *
     * @param userId userId (required)
     * @param contextId contextId (required)
     * @param allRoles Determines if all roles permissions are returned (optional, default to false)
     * @param roles comma separated list of roles (optional)
     * @param cacheControl  (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getUserContextByUserIdAndContextId",
        summary = "gets userContext by userId and contextId",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserContextPermissions.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usercontexts/user/{userId}/context/{contextId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserContextPermissions>> getUserContextByUserIdAndContextId(
        @Parameter(name = "userId", description = "userId", required = true) @PathVariable("userId") String userId,
        @Parameter(name = "contextId", description = "contextId", required = true) @PathVariable("contextId") String contextId,
        @Parameter(name = "allRoles", description = "Determines if all roles permissions are returned") @Valid @RequestParam(value = "allRoles", required = false, defaultValue = "false") Boolean allRoles,
        @Parameter(name = "roles", description = "comma separated list of roles") @Valid @RequestParam(value = "roles", required = false) String roles,
        @Parameter(name = "Cache-Control", description = "") @RequestHeader(value = "Cache-Control", required = false) String cacheControl,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getUserContextByUserIdAndContextId(userId, contextId, allRoles, roles, cacheControl, exchange);
    }


    /**
     * PUT /usercontexts/{usercontextId} : updates userContext via upsert
     * User must have UPDATE_USER_CONTEXTS permission
     *
     * @param usercontextId usercontextId (required)
     * @param userContext  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "updateUserContext",
        summary = "updates userContext via upsert",
        tags = { "UserContexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserContext.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/usercontexts/{usercontextId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<UserContext>> updateUserContext(
        @Parameter(name = "usercontextId", description = "usercontextId", required = true) @PathVariable("usercontextId") String usercontextId,
        @Parameter(name = "UserContext", description = "", required = true) @Valid @RequestBody Mono<UserContext> userContext,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().updateUserContext(usercontextId, userContext, exchange);
    }

}
